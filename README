ADS-ICS
=======

Welcome to the ADS-ICS Android Manifest.

ADS-ICS is an Android Ics Cream Sandwich build for the Dream/Sapphire systems.
It's based on the work of the CyanogenMod project.

Much thanks is required to the following:

- The CyanogenMod project, as without the many developers there many of these
  enhancements would not be possible.. Too many people to list but much of
  their hard work is in this rom as many others.
- ezTerry who gave the bases with ezGingerbread for the build system


Please note: this is still a work in progress!
Working:
- phone
- 2G/3G - network
- sdcard
- bluetooth
- zram
- ksm
- ...

Not working:
- audio / sound
- camera

Additional work to do:
- a2ext / magpie

You need a system partition of at least 140MB (!)


Binary Distributions
--------------------

non available yet, but stay tuned and check http://anddisa.minus.com

Developers Building Guide
=========================

Requirements x86 linux based computer
Instructions assume amd64 running one of
- Ubuntu 10.04 (Lucid)
- Ubuntu 10.10a3 (Meerkat)
- Debian Squeeze

Other environments and 32bit machines can build ADS-ICS but may
require minor modifications

Preparing your computer
-----------------------

PART ONE: Packages Required

The following is based of the CyanogenMod wiki entry:
http://wiki.cyanogenmod.com/index.php?title=Compile_CyanogenMod_for_Dream_%26_Sapphire


     Install using the package manager of your choice:
     
     For 32-bit & 64-bit systems:
     
     git-core gnupg flex bison gperf libsdl1.2-dev libesd0-dev libwxgtk2.6-dev
     squashfs-tools build-essential zip curl libncurses5-dev zlib1g-dev
     sun-java6-jdk pngcrush lzma
     
     For 64-bit only systems:
     
     g++-multilib lib32z1-dev lib32ncurses5-dev lib32readline5-dev
     gcc-4.3-multilib  g++-4.3-multilib
     
     NOTE: gcc-4.3-multilib g++-4.3-multilib is no longer available for Ubuntu
     11.04 64-bit, but should still build without issue. (with the current
     version of gcc/g++ installed)
     
     Note: On Ubuntu 10.10, and variants, you need to enable the partner
     repository to install sun-java6-jdk:
     
     add-apt-repository "deb http://archive.canonical.com/ maverick partner"

PART TWO: preparing repo

A) make a directory for you android work example 'mkdir ~/android'

B) download repo into the newly created directory:

     curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/android/repo

C) Make repo executable

     chmod 0644 ~/android/repo

D) [optional] make a symlink to repo on your path; or move the binary to your path example:

     sudo ln -s ~/android/repo /usr/local/bin/repo

Getting the Source Code
-----------------------

A) Change directory into the new android directory

     cd ~/android

B) create a directory for ADS-ICS:

     mkdir ads-ics

C) cd ads-ics

D) init the git repo

     repo init -u git://github.com/AndDiSa/manifest-ics-DS.git -b ads-ics

(It will ask for email/Name answer real or fake)

E) sync the code

     repo sync

F) This will take a while, please do not interrupt it.. even if it seems paused but network traffic continues


Proprietary Files
-----------------

Next we need to copy the Proprietary Files from an existing build into yourlocal tree

A) Download a known good version of ezGingerbread/ADS_Magpie (most recent or the approved one below) and name it sapphire_update.zip in the root of the ~/android/ads-ics directory

     curl http://dl.dropbox.com/u/9870397/android/ADS_magpie/ADS_magpie-V1.0-signed.zip > sapphire_update.zip


B) Now extract proprietary files with the unzip-files.sh script

     cd device/htc/dream-sapphire/
     ./unzip-files.sh
     cd ~/android/ads-ics

Note: if you have been asked to re-build the proprietary files, either because the autogenerated make script was updated, or a change in the files: run  'rm -rf vendor;repo sync;' before re-running the above.

Building ADS-ICS
----------------


A) run '. build/envsetup.sh'

B) run 'lunch' and select full_sapphire-userdebug 
(shortcuts you will find are 'lunch full_sapphire-userdebug'; or 'lunch 4' })

C) run 'make -j<Number of CPU cores in your computer +1> otapackage'
for example if you have a quad code CPU: 'make -j5 otapackage'
a dual core is 'make -j3 otapackage'

     FYI: The -jN indicates the number of parallel threads make will run, but
     using -j5 I assure all 4 cores are at 100% utilization .. important as it
     can take 3-4h to build on a single core.

D) after you realize the build is done (ie fan on computer stopped working overtime) the flash-able image will be:
ls out/target/product/dream_sapphire/full_dream_sapphire-ota-eng.<your username>.zip

so 'ls -l out/target/product/dream_sapphire/full_dream_sapphire-ota-eng*zip'

The resulting image will be the EBI0/EBI1/2708+ anykernel installer

Flash this image, followed by GAPPS and any other addon you desire and use as normal.

Updating and other Tips
-----------------------

Now that you have the first build, here are some tips on keeping your codebase up to date

Simple resync:

     repo sync
     make clobber
     make -j<Number of CPU cores in your computer +1> otapackage

Full refresh (using previous repo download):

     cd ~/android/ads-ics
     rm -rf `ls`
     #now pick up with repo sync above; previous files will be re-used

Specific builds:

repo init has an '-m' tag (see 'repo help init') that can be used to specify a checkpoint
for a specific build (run 'ls .repo/manifests/checkpoints/' for a list of these)

Note some checkpoints are using out of date git sources and may need some manual verification to re-build


